/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.geometry.BufferParams', null, global);
goog.exportSymbol('proto.geometry.ClipParams', null, global);
goog.exportSymbol('proto.geometry.ConvexParams', null, global);
goog.exportSymbol('proto.geometry.CutParams', null, global);
goog.exportSymbol('proto.geometry.DensifyParams', null, global);
goog.exportSymbol('proto.geometry.EnvelopeData', null, global);
goog.exportSymbol('proto.geometry.GeneralizeByAreaParams', null, global);
goog.exportSymbol('proto.geometry.GeneralizeParams', null, global);
goog.exportSymbol('proto.geometry.GeodeticBufferParams', null, global);
goog.exportSymbol('proto.geometry.GeometryBagData', null, global);
goog.exportSymbol('proto.geometry.GeometryEncodingType', null, global);
goog.exportSymbol('proto.geometry.IntersectionParams', null, global);
goog.exportSymbol('proto.geometry.OffsetJoinType', null, global);
goog.exportSymbol('proto.geometry.OffsetParams', null, global);
goog.exportSymbol('proto.geometry.OperatorRequest', null, global);
goog.exportSymbol('proto.geometry.OperatorResult', null, global);
goog.exportSymbol('proto.geometry.RandomPointsParams', null, global);
goog.exportSymbol('proto.geometry.RelateParams', null, global);
goog.exportSymbol('proto.geometry.ServiceOperatorType', null, global);
goog.exportSymbol('proto.geometry.SimplifyParams', null, global);
goog.exportSymbol('proto.geometry.SpatialReferenceData', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geometry.GeometryBagData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.geometry.GeometryBagData.repeatedFields_, null);
};
goog.inherits(proto.geometry.GeometryBagData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geometry.GeometryBagData.displayName = 'proto.geometry.GeometryBagData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.geometry.GeometryBagData.repeatedFields_ = [1,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geometry.GeometryBagData.prototype.toObject = function(opt_includeInstance) {
  return proto.geometry.GeometryBagData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geometry.GeometryBagData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.GeometryBagData.toObject = function(includeInstance, msg) {
  var f, obj = {
    geometryIdsList: jspb.Message.getRepeatedField(msg, 1),
    geometryEncodingType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    geometryStringsList: jspb.Message.getRepeatedField(msg, 3),
    geometryBinariesList: msg.getGeometryBinariesList_asB64(),
    spatialReference: (f = msg.getSpatialReference()) && proto.geometry.SpatialReferenceData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geometry.GeometryBagData}
 */
proto.geometry.GeometryBagData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geometry.GeometryBagData;
  return proto.geometry.GeometryBagData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geometry.GeometryBagData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geometry.GeometryBagData}
 */
proto.geometry.GeometryBagData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setGeometryIdsList(value);
      break;
    case 2:
      var value = /** @type {!proto.geometry.GeometryEncodingType} */ (reader.readEnum());
      msg.setGeometryEncodingType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addGeometryStrings(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addGeometryBinaries(value);
      break;
    case 5:
      var value = new proto.geometry.SpatialReferenceData;
      reader.readMessage(value,proto.geometry.SpatialReferenceData.deserializeBinaryFromReader);
      msg.setSpatialReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geometry.GeometryBagData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geometry.GeometryBagData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geometry.GeometryBagData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.GeometryBagData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGeometryIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
  f = message.getGeometryEncodingType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getGeometryStringsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getGeometryBinariesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      4,
      f
    );
  }
  f = message.getSpatialReference();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.geometry.SpatialReferenceData.serializeBinaryToWriter
    );
  }
};


/**
 * repeated int64 geometry_ids = 1;
 * @return {!Array.<number>}
 */
proto.geometry.GeometryBagData.prototype.getGeometryIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.geometry.GeometryBagData.prototype.setGeometryIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.geometry.GeometryBagData.prototype.addGeometryIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.geometry.GeometryBagData.prototype.clearGeometryIdsList = function() {
  this.setGeometryIdsList([]);
};


/**
 * optional GeometryEncodingType geometry_encoding_type = 2;
 * @return {!proto.geometry.GeometryEncodingType}
 */
proto.geometry.GeometryBagData.prototype.getGeometryEncodingType = function() {
  return /** @type {!proto.geometry.GeometryEncodingType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.geometry.GeometryEncodingType} value */
proto.geometry.GeometryBagData.prototype.setGeometryEncodingType = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated string geometry_strings = 3;
 * @return {!Array.<string>}
 */
proto.geometry.GeometryBagData.prototype.getGeometryStringsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<string>} value */
proto.geometry.GeometryBagData.prototype.setGeometryStringsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.geometry.GeometryBagData.prototype.addGeometryStrings = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.geometry.GeometryBagData.prototype.clearGeometryStringsList = function() {
  this.setGeometryStringsList([]);
};


/**
 * repeated bytes geometry_binaries = 4;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.geometry.GeometryBagData.prototype.getGeometryBinariesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * repeated bytes geometry_binaries = 4;
 * This is a type-conversion wrapper around `getGeometryBinariesList()`
 * @return {!Array.<string>}
 */
proto.geometry.GeometryBagData.prototype.getGeometryBinariesList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getGeometryBinariesList()));
};


/**
 * repeated bytes geometry_binaries = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGeometryBinariesList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.geometry.GeometryBagData.prototype.getGeometryBinariesList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getGeometryBinariesList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.geometry.GeometryBagData.prototype.setGeometryBinariesList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.geometry.GeometryBagData.prototype.addGeometryBinaries = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.geometry.GeometryBagData.prototype.clearGeometryBinariesList = function() {
  this.setGeometryBinariesList([]);
};


/**
 * optional SpatialReferenceData spatial_reference = 5;
 * @return {?proto.geometry.SpatialReferenceData}
 */
proto.geometry.GeometryBagData.prototype.getSpatialReference = function() {
  return /** @type{?proto.geometry.SpatialReferenceData} */ (
    jspb.Message.getWrapperField(this, proto.geometry.SpatialReferenceData, 5));
};


/** @param {?proto.geometry.SpatialReferenceData|undefined} value */
proto.geometry.GeometryBagData.prototype.setSpatialReference = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.geometry.GeometryBagData.prototype.clearSpatialReference = function() {
  this.setSpatialReference(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geometry.GeometryBagData.prototype.hasSpatialReference = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geometry.SpatialReferenceData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geometry.SpatialReferenceData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geometry.SpatialReferenceData.displayName = 'proto.geometry.SpatialReferenceData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geometry.SpatialReferenceData.prototype.toObject = function(opt_includeInstance) {
  return proto.geometry.SpatialReferenceData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geometry.SpatialReferenceData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.SpatialReferenceData.toObject = function(includeInstance, msg) {
  var f, obj = {
    proj4: jspb.Message.getFieldWithDefault(msg, 4, ""),
    esriWkt: jspb.Message.getFieldWithDefault(msg, 5, ""),
    wkid: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geometry.SpatialReferenceData}
 */
proto.geometry.SpatialReferenceData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geometry.SpatialReferenceData;
  return proto.geometry.SpatialReferenceData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geometry.SpatialReferenceData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geometry.SpatialReferenceData}
 */
proto.geometry.SpatialReferenceData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setProj4(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEsriWkt(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWkid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geometry.SpatialReferenceData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geometry.SpatialReferenceData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geometry.SpatialReferenceData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.SpatialReferenceData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProj4();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEsriWkt();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getWkid();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional string proj4 = 4;
 * @return {string}
 */
proto.geometry.SpatialReferenceData.prototype.getProj4 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.geometry.SpatialReferenceData.prototype.setProj4 = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string esri_wkt = 5;
 * @return {string}
 */
proto.geometry.SpatialReferenceData.prototype.getEsriWkt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.geometry.SpatialReferenceData.prototype.setEsriWkt = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 wkid = 6;
 * @return {number}
 */
proto.geometry.SpatialReferenceData.prototype.getWkid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.geometry.SpatialReferenceData.prototype.setWkid = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geometry.OperatorResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geometry.OperatorResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geometry.OperatorResult.displayName = 'proto.geometry.OperatorResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geometry.OperatorResult.prototype.toObject = function(opt_includeInstance) {
  return proto.geometry.OperatorResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geometry.OperatorResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.OperatorResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    geometryBag: (f = msg.getGeometryBag()) && proto.geometry.GeometryBagData.toObject(includeInstance, f),
    spatialRelationship: jspb.Message.getFieldWithDefault(msg, 2, false),
    distance: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    relateMapMap: (f = msg.getRelateMapMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geometry.OperatorResult}
 */
proto.geometry.OperatorResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geometry.OperatorResult;
  return proto.geometry.OperatorResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geometry.OperatorResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geometry.OperatorResult}
 */
proto.geometry.OperatorResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.geometry.GeometryBagData;
      reader.readMessage(value,proto.geometry.GeometryBagData.deserializeBinaryFromReader);
      msg.setGeometryBag(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSpatialRelationship(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistance(value);
      break;
    case 4:
      var value = msg.getRelateMapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readBool);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geometry.OperatorResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geometry.OperatorResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geometry.OperatorResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.OperatorResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGeometryBag();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.geometry.GeometryBagData.serializeBinaryToWriter
    );
  }
  f = message.getSpatialRelationship();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDistance();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getRelateMapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeBool);
  }
};


/**
 * optional GeometryBagData geometry_bag = 1;
 * @return {?proto.geometry.GeometryBagData}
 */
proto.geometry.OperatorResult.prototype.getGeometryBag = function() {
  return /** @type{?proto.geometry.GeometryBagData} */ (
    jspb.Message.getWrapperField(this, proto.geometry.GeometryBagData, 1));
};


/** @param {?proto.geometry.GeometryBagData|undefined} value */
proto.geometry.OperatorResult.prototype.setGeometryBag = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.geometry.OperatorResult.prototype.clearGeometryBag = function() {
  this.setGeometryBag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geometry.OperatorResult.prototype.hasGeometryBag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool spatial_relationship = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.geometry.OperatorResult.prototype.getSpatialRelationship = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.geometry.OperatorResult.prototype.setSpatialRelationship = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional double distance = 3;
 * @return {number}
 */
proto.geometry.OperatorResult.prototype.getDistance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.geometry.OperatorResult.prototype.setDistance = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * map<int32, bool> relate_map = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,boolean>}
 */
proto.geometry.OperatorResult.prototype.getRelateMapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,boolean>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


proto.geometry.OperatorResult.prototype.clearRelateMapMap = function() {
  this.getRelateMapMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geometry.BufferParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.geometry.BufferParams.repeatedFields_, null);
};
goog.inherits(proto.geometry.BufferParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geometry.BufferParams.displayName = 'proto.geometry.BufferParams';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.geometry.BufferParams.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geometry.BufferParams.prototype.toObject = function(opt_includeInstance) {
  return proto.geometry.BufferParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geometry.BufferParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.BufferParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    distancesList: jspb.Message.getRepeatedFloatingPointField(msg, 1),
    maxDeviationsList: jspb.Message.getRepeatedFloatingPointField(msg, 2),
    unionResult: jspb.Message.getFieldWithDefault(msg, 3, false),
    maxVerticesInFullCircle: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geometry.BufferParams}
 */
proto.geometry.BufferParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geometry.BufferParams;
  return proto.geometry.BufferParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geometry.BufferParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geometry.BufferParams}
 */
proto.geometry.BufferParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setDistancesList(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setMaxDeviationsList(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUnionResult(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxVerticesInFullCircle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geometry.BufferParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geometry.BufferParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geometry.BufferParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.BufferParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDistancesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      1,
      f
    );
  }
  f = message.getMaxDeviationsList();
  if (f.length > 0) {
    writer.writePackedDouble(
      2,
      f
    );
  }
  f = message.getUnionResult();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getMaxVerticesInFullCircle();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * repeated double distances = 1;
 * @return {!Array.<number>}
 */
proto.geometry.BufferParams.prototype.getDistancesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/** @param {!Array.<number>} value */
proto.geometry.BufferParams.prototype.setDistancesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.geometry.BufferParams.prototype.addDistances = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.geometry.BufferParams.prototype.clearDistancesList = function() {
  this.setDistancesList([]);
};


/**
 * repeated double max_deviations = 2;
 * @return {!Array.<number>}
 */
proto.geometry.BufferParams.prototype.getMaxDeviationsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/** @param {!Array.<number>} value */
proto.geometry.BufferParams.prototype.setMaxDeviationsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.geometry.BufferParams.prototype.addMaxDeviations = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.geometry.BufferParams.prototype.clearMaxDeviationsList = function() {
  this.setMaxDeviationsList([]);
};


/**
 * optional bool union_result = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.geometry.BufferParams.prototype.getUnionResult = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.geometry.BufferParams.prototype.setUnionResult = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 max_vertices_in_full_circle = 4;
 * @return {number}
 */
proto.geometry.BufferParams.prototype.getMaxVerticesInFullCircle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.geometry.BufferParams.prototype.setMaxVerticesInFullCircle = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geometry.GeodeticBufferParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.geometry.GeodeticBufferParams.repeatedFields_, null);
};
goog.inherits(proto.geometry.GeodeticBufferParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geometry.GeodeticBufferParams.displayName = 'proto.geometry.GeodeticBufferParams';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.geometry.GeodeticBufferParams.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geometry.GeodeticBufferParams.prototype.toObject = function(opt_includeInstance) {
  return proto.geometry.GeodeticBufferParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geometry.GeodeticBufferParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.GeodeticBufferParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    distancesList: jspb.Message.getRepeatedFloatingPointField(msg, 1),
    maxDeviationsList: jspb.Message.getRepeatedFloatingPointField(msg, 2),
    unionResult: jspb.Message.getFieldWithDefault(msg, 3, false),
    maxVerticesInFullCircle: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geometry.GeodeticBufferParams}
 */
proto.geometry.GeodeticBufferParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geometry.GeodeticBufferParams;
  return proto.geometry.GeodeticBufferParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geometry.GeodeticBufferParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geometry.GeodeticBufferParams}
 */
proto.geometry.GeodeticBufferParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setDistancesList(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setMaxDeviationsList(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUnionResult(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxVerticesInFullCircle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geometry.GeodeticBufferParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geometry.GeodeticBufferParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geometry.GeodeticBufferParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.GeodeticBufferParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDistancesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      1,
      f
    );
  }
  f = message.getMaxDeviationsList();
  if (f.length > 0) {
    writer.writePackedDouble(
      2,
      f
    );
  }
  f = message.getUnionResult();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getMaxVerticesInFullCircle();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * repeated double distances = 1;
 * @return {!Array.<number>}
 */
proto.geometry.GeodeticBufferParams.prototype.getDistancesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/** @param {!Array.<number>} value */
proto.geometry.GeodeticBufferParams.prototype.setDistancesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.geometry.GeodeticBufferParams.prototype.addDistances = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.geometry.GeodeticBufferParams.prototype.clearDistancesList = function() {
  this.setDistancesList([]);
};


/**
 * repeated double max_deviations = 2;
 * @return {!Array.<number>}
 */
proto.geometry.GeodeticBufferParams.prototype.getMaxDeviationsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/** @param {!Array.<number>} value */
proto.geometry.GeodeticBufferParams.prototype.setMaxDeviationsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.geometry.GeodeticBufferParams.prototype.addMaxDeviations = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.geometry.GeodeticBufferParams.prototype.clearMaxDeviationsList = function() {
  this.setMaxDeviationsList([]);
};


/**
 * optional bool union_result = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.geometry.GeodeticBufferParams.prototype.getUnionResult = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.geometry.GeodeticBufferParams.prototype.setUnionResult = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 max_vertices_in_full_circle = 4;
 * @return {number}
 */
proto.geometry.GeodeticBufferParams.prototype.getMaxVerticesInFullCircle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.geometry.GeodeticBufferParams.prototype.setMaxVerticesInFullCircle = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geometry.ConvexParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geometry.ConvexParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geometry.ConvexParams.displayName = 'proto.geometry.ConvexParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geometry.ConvexParams.prototype.toObject = function(opt_includeInstance) {
  return proto.geometry.ConvexParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geometry.ConvexParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.ConvexParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    merge: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geometry.ConvexParams}
 */
proto.geometry.ConvexParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geometry.ConvexParams;
  return proto.geometry.ConvexParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geometry.ConvexParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geometry.ConvexParams}
 */
proto.geometry.ConvexParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMerge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geometry.ConvexParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geometry.ConvexParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geometry.ConvexParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.ConvexParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMerge();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool merge = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.geometry.ConvexParams.prototype.getMerge = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.geometry.ConvexParams.prototype.setMerge = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geometry.RelateParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geometry.RelateParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geometry.RelateParams.displayName = 'proto.geometry.RelateParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geometry.RelateParams.prototype.toObject = function(opt_includeInstance) {
  return proto.geometry.RelateParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geometry.RelateParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.RelateParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    de9im: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geometry.RelateParams}
 */
proto.geometry.RelateParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geometry.RelateParams;
  return proto.geometry.RelateParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geometry.RelateParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geometry.RelateParams}
 */
proto.geometry.RelateParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDe9im(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geometry.RelateParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geometry.RelateParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geometry.RelateParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.RelateParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDe9im();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string de_9im = 1;
 * @return {string}
 */
proto.geometry.RelateParams.prototype.getDe9im = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.geometry.RelateParams.prototype.setDe9im = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geometry.RandomPointsParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.geometry.RandomPointsParams.repeatedFields_, null);
};
goog.inherits(proto.geometry.RandomPointsParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geometry.RandomPointsParams.displayName = 'proto.geometry.RandomPointsParams';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.geometry.RandomPointsParams.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geometry.RandomPointsParams.prototype.toObject = function(opt_includeInstance) {
  return proto.geometry.RandomPointsParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geometry.RandomPointsParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.RandomPointsParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    pointsPerSquareKmList: jspb.Message.getRepeatedFloatingPointField(msg, 1),
    seed: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geometry.RandomPointsParams}
 */
proto.geometry.RandomPointsParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geometry.RandomPointsParams;
  return proto.geometry.RandomPointsParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geometry.RandomPointsParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geometry.RandomPointsParams}
 */
proto.geometry.RandomPointsParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setPointsPerSquareKmList(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geometry.RandomPointsParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geometry.RandomPointsParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geometry.RandomPointsParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.RandomPointsParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointsPerSquareKmList();
  if (f.length > 0) {
    writer.writePackedDouble(
      1,
      f
    );
  }
  f = message.getSeed();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * repeated double points_per_square_km = 1;
 * @return {!Array.<number>}
 */
proto.geometry.RandomPointsParams.prototype.getPointsPerSquareKmList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/** @param {!Array.<number>} value */
proto.geometry.RandomPointsParams.prototype.setPointsPerSquareKmList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.geometry.RandomPointsParams.prototype.addPointsPerSquareKm = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.geometry.RandomPointsParams.prototype.clearPointsPerSquareKmList = function() {
  this.setPointsPerSquareKmList([]);
};


/**
 * optional int64 seed = 2;
 * @return {number}
 */
proto.geometry.RandomPointsParams.prototype.getSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.geometry.RandomPointsParams.prototype.setSeed = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geometry.GeneralizeParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geometry.GeneralizeParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geometry.GeneralizeParams.displayName = 'proto.geometry.GeneralizeParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geometry.GeneralizeParams.prototype.toObject = function(opt_includeInstance) {
  return proto.geometry.GeneralizeParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geometry.GeneralizeParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.GeneralizeParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxDeviation: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    removeDegenerates: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geometry.GeneralizeParams}
 */
proto.geometry.GeneralizeParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geometry.GeneralizeParams;
  return proto.geometry.GeneralizeParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geometry.GeneralizeParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geometry.GeneralizeParams}
 */
proto.geometry.GeneralizeParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxDeviation(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRemoveDegenerates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geometry.GeneralizeParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geometry.GeneralizeParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geometry.GeneralizeParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.GeneralizeParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxDeviation();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getRemoveDegenerates();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional double max_deviation = 1;
 * @return {number}
 */
proto.geometry.GeneralizeParams.prototype.getMaxDeviation = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.geometry.GeneralizeParams.prototype.setMaxDeviation = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool remove_degenerates = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.geometry.GeneralizeParams.prototype.getRemoveDegenerates = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.geometry.GeneralizeParams.prototype.setRemoveDegenerates = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geometry.GeneralizeByAreaParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geometry.GeneralizeByAreaParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geometry.GeneralizeByAreaParams.displayName = 'proto.geometry.GeneralizeByAreaParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geometry.GeneralizeByAreaParams.prototype.toObject = function(opt_includeInstance) {
  return proto.geometry.GeneralizeByAreaParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geometry.GeneralizeByAreaParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.GeneralizeByAreaParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxDeviation: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    removeDegenerates: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geometry.GeneralizeByAreaParams}
 */
proto.geometry.GeneralizeByAreaParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geometry.GeneralizeByAreaParams;
  return proto.geometry.GeneralizeByAreaParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geometry.GeneralizeByAreaParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geometry.GeneralizeByAreaParams}
 */
proto.geometry.GeneralizeByAreaParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxDeviation(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRemoveDegenerates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geometry.GeneralizeByAreaParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geometry.GeneralizeByAreaParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geometry.GeneralizeByAreaParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.GeneralizeByAreaParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxDeviation();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getRemoveDegenerates();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional double max_deviation = 1;
 * @return {number}
 */
proto.geometry.GeneralizeByAreaParams.prototype.getMaxDeviation = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.geometry.GeneralizeByAreaParams.prototype.setMaxDeviation = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool remove_degenerates = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.geometry.GeneralizeByAreaParams.prototype.getRemoveDegenerates = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.geometry.GeneralizeByAreaParams.prototype.setRemoveDegenerates = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geometry.IntersectionParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geometry.IntersectionParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geometry.IntersectionParams.displayName = 'proto.geometry.IntersectionParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geometry.IntersectionParams.prototype.toObject = function(opt_includeInstance) {
  return proto.geometry.IntersectionParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geometry.IntersectionParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.IntersectionParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    dimensionMask: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geometry.IntersectionParams}
 */
proto.geometry.IntersectionParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geometry.IntersectionParams;
  return proto.geometry.IntersectionParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geometry.IntersectionParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geometry.IntersectionParams}
 */
proto.geometry.IntersectionParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDimensionMask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geometry.IntersectionParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geometry.IntersectionParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geometry.IntersectionParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.IntersectionParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDimensionMask();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 dimension_mask = 1;
 * @return {number}
 */
proto.geometry.IntersectionParams.prototype.getDimensionMask = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.geometry.IntersectionParams.prototype.setDimensionMask = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geometry.OffsetParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geometry.OffsetParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geometry.OffsetParams.displayName = 'proto.geometry.OffsetParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geometry.OffsetParams.prototype.toObject = function(opt_includeInstance) {
  return proto.geometry.OffsetParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geometry.OffsetParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.OffsetParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    distance: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    joinType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    bevelRatio: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    flattenError: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geometry.OffsetParams}
 */
proto.geometry.OffsetParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geometry.OffsetParams;
  return proto.geometry.OffsetParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geometry.OffsetParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geometry.OffsetParams}
 */
proto.geometry.OffsetParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistance(value);
      break;
    case 2:
      var value = /** @type {!proto.geometry.OffsetJoinType} */ (reader.readEnum());
      msg.setJoinType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBevelRatio(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFlattenError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geometry.OffsetParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geometry.OffsetParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geometry.OffsetParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.OffsetParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDistance();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getJoinType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getBevelRatio();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getFlattenError();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double distance = 1;
 * @return {number}
 */
proto.geometry.OffsetParams.prototype.getDistance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.geometry.OffsetParams.prototype.setDistance = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional OffsetJoinType join_type = 2;
 * @return {!proto.geometry.OffsetJoinType}
 */
proto.geometry.OffsetParams.prototype.getJoinType = function() {
  return /** @type {!proto.geometry.OffsetJoinType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.geometry.OffsetJoinType} value */
proto.geometry.OffsetParams.prototype.setJoinType = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional double bevel_ratio = 3;
 * @return {number}
 */
proto.geometry.OffsetParams.prototype.getBevelRatio = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.geometry.OffsetParams.prototype.setBevelRatio = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional double flatten_error = 4;
 * @return {number}
 */
proto.geometry.OffsetParams.prototype.getFlattenError = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.geometry.OffsetParams.prototype.setFlattenError = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geometry.CutParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geometry.CutParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geometry.CutParams.displayName = 'proto.geometry.CutParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geometry.CutParams.prototype.toObject = function(opt_includeInstance) {
  return proto.geometry.CutParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geometry.CutParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.CutParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    considerTouch: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geometry.CutParams}
 */
proto.geometry.CutParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geometry.CutParams;
  return proto.geometry.CutParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geometry.CutParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geometry.CutParams}
 */
proto.geometry.CutParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConsiderTouch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geometry.CutParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geometry.CutParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geometry.CutParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.CutParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConsiderTouch();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool consider_touch = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.geometry.CutParams.prototype.getConsiderTouch = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.geometry.CutParams.prototype.setConsiderTouch = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geometry.ClipParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geometry.ClipParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geometry.ClipParams.displayName = 'proto.geometry.ClipParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geometry.ClipParams.prototype.toObject = function(opt_includeInstance) {
  return proto.geometry.ClipParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geometry.ClipParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.ClipParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    envelope: (f = msg.getEnvelope()) && proto.geometry.EnvelopeData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geometry.ClipParams}
 */
proto.geometry.ClipParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geometry.ClipParams;
  return proto.geometry.ClipParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geometry.ClipParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geometry.ClipParams}
 */
proto.geometry.ClipParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.geometry.EnvelopeData;
      reader.readMessage(value,proto.geometry.EnvelopeData.deserializeBinaryFromReader);
      msg.setEnvelope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geometry.ClipParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geometry.ClipParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geometry.ClipParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.ClipParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnvelope();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.geometry.EnvelopeData.serializeBinaryToWriter
    );
  }
};


/**
 * optional EnvelopeData envelope = 1;
 * @return {?proto.geometry.EnvelopeData}
 */
proto.geometry.ClipParams.prototype.getEnvelope = function() {
  return /** @type{?proto.geometry.EnvelopeData} */ (
    jspb.Message.getWrapperField(this, proto.geometry.EnvelopeData, 1));
};


/** @param {?proto.geometry.EnvelopeData|undefined} value */
proto.geometry.ClipParams.prototype.setEnvelope = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.geometry.ClipParams.prototype.clearEnvelope = function() {
  this.setEnvelope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geometry.ClipParams.prototype.hasEnvelope = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geometry.DensifyParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geometry.DensifyParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geometry.DensifyParams.displayName = 'proto.geometry.DensifyParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geometry.DensifyParams.prototype.toObject = function(opt_includeInstance) {
  return proto.geometry.DensifyParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geometry.DensifyParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.DensifyParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxLength: +jspb.Message.getFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geometry.DensifyParams}
 */
proto.geometry.DensifyParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geometry.DensifyParams;
  return proto.geometry.DensifyParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geometry.DensifyParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geometry.DensifyParams}
 */
proto.geometry.DensifyParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxLength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geometry.DensifyParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geometry.DensifyParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geometry.DensifyParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.DensifyParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxLength();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double max_length = 1;
 * @return {number}
 */
proto.geometry.DensifyParams.prototype.getMaxLength = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.geometry.DensifyParams.prototype.setMaxLength = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geometry.SimplifyParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geometry.SimplifyParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geometry.SimplifyParams.displayName = 'proto.geometry.SimplifyParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geometry.SimplifyParams.prototype.toObject = function(opt_includeInstance) {
  return proto.geometry.SimplifyParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geometry.SimplifyParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.SimplifyParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    force: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geometry.SimplifyParams}
 */
proto.geometry.SimplifyParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geometry.SimplifyParams;
  return proto.geometry.SimplifyParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geometry.SimplifyParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geometry.SimplifyParams}
 */
proto.geometry.SimplifyParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geometry.SimplifyParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geometry.SimplifyParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geometry.SimplifyParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.SimplifyParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getForce();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool force = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.geometry.SimplifyParams.prototype.getForce = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.geometry.SimplifyParams.prototype.setForce = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geometry.OperatorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.geometry.OperatorRequest.oneofGroups_);
};
goog.inherits(proto.geometry.OperatorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geometry.OperatorRequest.displayName = 'proto.geometry.OperatorRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.geometry.OperatorRequest.oneofGroups_ = [[1,2,3,4],[5,6],[11,12,13,14,15,16,17,18,19,20,21]];

/**
 * @enum {number}
 */
proto.geometry.OperatorRequest.PrimaryGeomsCase = {
  PRIMARY_GEOMS_NOT_SET: 0,
  GEOMETRY_BAG: 1,
  NESTED_REQUEST: 2,
  LEFT_GEOMETRY_BAG: 3,
  LEFT_NESTED_REQUEST: 4
};

/**
 * @return {proto.geometry.OperatorRequest.PrimaryGeomsCase}
 */
proto.geometry.OperatorRequest.prototype.getPrimaryGeomsCase = function() {
  return /** @type {proto.geometry.OperatorRequest.PrimaryGeomsCase} */(jspb.Message.computeOneofCase(this, proto.geometry.OperatorRequest.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.geometry.OperatorRequest.SecondaryGeomsCase = {
  SECONDARY_GEOMS_NOT_SET: 0,
  RIGHT_GEOMETRY_BAG: 5,
  RIGHT_NESTED_REQUEST: 6
};

/**
 * @return {proto.geometry.OperatorRequest.SecondaryGeomsCase}
 */
proto.geometry.OperatorRequest.prototype.getSecondaryGeomsCase = function() {
  return /** @type {proto.geometry.OperatorRequest.SecondaryGeomsCase} */(jspb.Message.computeOneofCase(this, proto.geometry.OperatorRequest.oneofGroups_[1]));
};

/**
 * @enum {number}
 */
proto.geometry.OperatorRequest.ParamsCase = {
  PARAMS_NOT_SET: 0,
  BUFFER_PARAMS: 11,
  CONVEX_PARAMS: 12,
  RELATE_PARAMS: 13,
  RANDOM_POINTS_PARAMS: 14,
  GENERALIZE_PARAMS: 15,
  INTERSECTION_PARAMS: 16,
  OFFSET_PARAMS: 17,
  CUT_PARAMS: 18,
  CLIP_PARAMS: 19,
  DENSIFY_PARAMS: 20,
  SIMPLIFY_PARAMS: 21
};

/**
 * @return {proto.geometry.OperatorRequest.ParamsCase}
 */
proto.geometry.OperatorRequest.prototype.getParamsCase = function() {
  return /** @type {proto.geometry.OperatorRequest.ParamsCase} */(jspb.Message.computeOneofCase(this, proto.geometry.OperatorRequest.oneofGroups_[2]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geometry.OperatorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.geometry.OperatorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geometry.OperatorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.OperatorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    geometryBag: (f = msg.getGeometryBag()) && proto.geometry.GeometryBagData.toObject(includeInstance, f),
    nestedRequest: (f = msg.getNestedRequest()) && proto.geometry.OperatorRequest.toObject(includeInstance, f),
    leftGeometryBag: (f = msg.getLeftGeometryBag()) && proto.geometry.GeometryBagData.toObject(includeInstance, f),
    leftNestedRequest: (f = msg.getLeftNestedRequest()) && proto.geometry.OperatorRequest.toObject(includeInstance, f),
    rightGeometryBag: (f = msg.getRightGeometryBag()) && proto.geometry.GeometryBagData.toObject(includeInstance, f),
    rightNestedRequest: (f = msg.getRightNestedRequest()) && proto.geometry.OperatorRequest.toObject(includeInstance, f),
    operatorType: jspb.Message.getFieldWithDefault(msg, 7, 0),
    resultsEncodingType: jspb.Message.getFieldWithDefault(msg, 8, 0),
    operationSpatialReference: (f = msg.getOperationSpatialReference()) && proto.geometry.SpatialReferenceData.toObject(includeInstance, f),
    resultSpatialReference: (f = msg.getResultSpatialReference()) && proto.geometry.SpatialReferenceData.toObject(includeInstance, f),
    bufferParams: (f = msg.getBufferParams()) && proto.geometry.BufferParams.toObject(includeInstance, f),
    convexParams: (f = msg.getConvexParams()) && proto.geometry.ConvexParams.toObject(includeInstance, f),
    relateParams: (f = msg.getRelateParams()) && proto.geometry.RelateParams.toObject(includeInstance, f),
    randomPointsParams: (f = msg.getRandomPointsParams()) && proto.geometry.RandomPointsParams.toObject(includeInstance, f),
    generalizeParams: (f = msg.getGeneralizeParams()) && proto.geometry.GeneralizeParams.toObject(includeInstance, f),
    intersectionParams: (f = msg.getIntersectionParams()) && proto.geometry.IntersectionParams.toObject(includeInstance, f),
    offsetParams: (f = msg.getOffsetParams()) && proto.geometry.OffsetParams.toObject(includeInstance, f),
    cutParams: (f = msg.getCutParams()) && proto.geometry.CutParams.toObject(includeInstance, f),
    clipParams: (f = msg.getClipParams()) && proto.geometry.ClipParams.toObject(includeInstance, f),
    densifyParams: (f = msg.getDensifyParams()) && proto.geometry.DensifyParams.toObject(includeInstance, f),
    simplifyParams: (f = msg.getSimplifyParams()) && proto.geometry.SimplifyParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geometry.OperatorRequest}
 */
proto.geometry.OperatorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geometry.OperatorRequest;
  return proto.geometry.OperatorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geometry.OperatorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geometry.OperatorRequest}
 */
proto.geometry.OperatorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.geometry.GeometryBagData;
      reader.readMessage(value,proto.geometry.GeometryBagData.deserializeBinaryFromReader);
      msg.setGeometryBag(value);
      break;
    case 2:
      var value = new proto.geometry.OperatorRequest;
      reader.readMessage(value,proto.geometry.OperatorRequest.deserializeBinaryFromReader);
      msg.setNestedRequest(value);
      break;
    case 3:
      var value = new proto.geometry.GeometryBagData;
      reader.readMessage(value,proto.geometry.GeometryBagData.deserializeBinaryFromReader);
      msg.setLeftGeometryBag(value);
      break;
    case 4:
      var value = new proto.geometry.OperatorRequest;
      reader.readMessage(value,proto.geometry.OperatorRequest.deserializeBinaryFromReader);
      msg.setLeftNestedRequest(value);
      break;
    case 5:
      var value = new proto.geometry.GeometryBagData;
      reader.readMessage(value,proto.geometry.GeometryBagData.deserializeBinaryFromReader);
      msg.setRightGeometryBag(value);
      break;
    case 6:
      var value = new proto.geometry.OperatorRequest;
      reader.readMessage(value,proto.geometry.OperatorRequest.deserializeBinaryFromReader);
      msg.setRightNestedRequest(value);
      break;
    case 7:
      var value = /** @type {!proto.geometry.ServiceOperatorType} */ (reader.readEnum());
      msg.setOperatorType(value);
      break;
    case 8:
      var value = /** @type {!proto.geometry.GeometryEncodingType} */ (reader.readEnum());
      msg.setResultsEncodingType(value);
      break;
    case 9:
      var value = new proto.geometry.SpatialReferenceData;
      reader.readMessage(value,proto.geometry.SpatialReferenceData.deserializeBinaryFromReader);
      msg.setOperationSpatialReference(value);
      break;
    case 10:
      var value = new proto.geometry.SpatialReferenceData;
      reader.readMessage(value,proto.geometry.SpatialReferenceData.deserializeBinaryFromReader);
      msg.setResultSpatialReference(value);
      break;
    case 11:
      var value = new proto.geometry.BufferParams;
      reader.readMessage(value,proto.geometry.BufferParams.deserializeBinaryFromReader);
      msg.setBufferParams(value);
      break;
    case 12:
      var value = new proto.geometry.ConvexParams;
      reader.readMessage(value,proto.geometry.ConvexParams.deserializeBinaryFromReader);
      msg.setConvexParams(value);
      break;
    case 13:
      var value = new proto.geometry.RelateParams;
      reader.readMessage(value,proto.geometry.RelateParams.deserializeBinaryFromReader);
      msg.setRelateParams(value);
      break;
    case 14:
      var value = new proto.geometry.RandomPointsParams;
      reader.readMessage(value,proto.geometry.RandomPointsParams.deserializeBinaryFromReader);
      msg.setRandomPointsParams(value);
      break;
    case 15:
      var value = new proto.geometry.GeneralizeParams;
      reader.readMessage(value,proto.geometry.GeneralizeParams.deserializeBinaryFromReader);
      msg.setGeneralizeParams(value);
      break;
    case 16:
      var value = new proto.geometry.IntersectionParams;
      reader.readMessage(value,proto.geometry.IntersectionParams.deserializeBinaryFromReader);
      msg.setIntersectionParams(value);
      break;
    case 17:
      var value = new proto.geometry.OffsetParams;
      reader.readMessage(value,proto.geometry.OffsetParams.deserializeBinaryFromReader);
      msg.setOffsetParams(value);
      break;
    case 18:
      var value = new proto.geometry.CutParams;
      reader.readMessage(value,proto.geometry.CutParams.deserializeBinaryFromReader);
      msg.setCutParams(value);
      break;
    case 19:
      var value = new proto.geometry.ClipParams;
      reader.readMessage(value,proto.geometry.ClipParams.deserializeBinaryFromReader);
      msg.setClipParams(value);
      break;
    case 20:
      var value = new proto.geometry.DensifyParams;
      reader.readMessage(value,proto.geometry.DensifyParams.deserializeBinaryFromReader);
      msg.setDensifyParams(value);
      break;
    case 21:
      var value = new proto.geometry.SimplifyParams;
      reader.readMessage(value,proto.geometry.SimplifyParams.deserializeBinaryFromReader);
      msg.setSimplifyParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geometry.OperatorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geometry.OperatorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geometry.OperatorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.OperatorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGeometryBag();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.geometry.GeometryBagData.serializeBinaryToWriter
    );
  }
  f = message.getNestedRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.geometry.OperatorRequest.serializeBinaryToWriter
    );
  }
  f = message.getLeftGeometryBag();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.geometry.GeometryBagData.serializeBinaryToWriter
    );
  }
  f = message.getLeftNestedRequest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.geometry.OperatorRequest.serializeBinaryToWriter
    );
  }
  f = message.getRightGeometryBag();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.geometry.GeometryBagData.serializeBinaryToWriter
    );
  }
  f = message.getRightNestedRequest();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.geometry.OperatorRequest.serializeBinaryToWriter
    );
  }
  f = message.getOperatorType();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getResultsEncodingType();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getOperationSpatialReference();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.geometry.SpatialReferenceData.serializeBinaryToWriter
    );
  }
  f = message.getResultSpatialReference();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.geometry.SpatialReferenceData.serializeBinaryToWriter
    );
  }
  f = message.getBufferParams();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.geometry.BufferParams.serializeBinaryToWriter
    );
  }
  f = message.getConvexParams();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.geometry.ConvexParams.serializeBinaryToWriter
    );
  }
  f = message.getRelateParams();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.geometry.RelateParams.serializeBinaryToWriter
    );
  }
  f = message.getRandomPointsParams();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.geometry.RandomPointsParams.serializeBinaryToWriter
    );
  }
  f = message.getGeneralizeParams();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.geometry.GeneralizeParams.serializeBinaryToWriter
    );
  }
  f = message.getIntersectionParams();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.geometry.IntersectionParams.serializeBinaryToWriter
    );
  }
  f = message.getOffsetParams();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.geometry.OffsetParams.serializeBinaryToWriter
    );
  }
  f = message.getCutParams();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.geometry.CutParams.serializeBinaryToWriter
    );
  }
  f = message.getClipParams();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.geometry.ClipParams.serializeBinaryToWriter
    );
  }
  f = message.getDensifyParams();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.geometry.DensifyParams.serializeBinaryToWriter
    );
  }
  f = message.getSimplifyParams();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.geometry.SimplifyParams.serializeBinaryToWriter
    );
  }
};


/**
 * optional GeometryBagData geometry_bag = 1;
 * @return {?proto.geometry.GeometryBagData}
 */
proto.geometry.OperatorRequest.prototype.getGeometryBag = function() {
  return /** @type{?proto.geometry.GeometryBagData} */ (
    jspb.Message.getWrapperField(this, proto.geometry.GeometryBagData, 1));
};


/** @param {?proto.geometry.GeometryBagData|undefined} value */
proto.geometry.OperatorRequest.prototype.setGeometryBag = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.geometry.OperatorRequest.oneofGroups_[0], value);
};


proto.geometry.OperatorRequest.prototype.clearGeometryBag = function() {
  this.setGeometryBag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geometry.OperatorRequest.prototype.hasGeometryBag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OperatorRequest nested_request = 2;
 * @return {?proto.geometry.OperatorRequest}
 */
proto.geometry.OperatorRequest.prototype.getNestedRequest = function() {
  return /** @type{?proto.geometry.OperatorRequest} */ (
    jspb.Message.getWrapperField(this, proto.geometry.OperatorRequest, 2));
};


/** @param {?proto.geometry.OperatorRequest|undefined} value */
proto.geometry.OperatorRequest.prototype.setNestedRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.geometry.OperatorRequest.oneofGroups_[0], value);
};


proto.geometry.OperatorRequest.prototype.clearNestedRequest = function() {
  this.setNestedRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geometry.OperatorRequest.prototype.hasNestedRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GeometryBagData left_geometry_bag = 3;
 * @return {?proto.geometry.GeometryBagData}
 */
proto.geometry.OperatorRequest.prototype.getLeftGeometryBag = function() {
  return /** @type{?proto.geometry.GeometryBagData} */ (
    jspb.Message.getWrapperField(this, proto.geometry.GeometryBagData, 3));
};


/** @param {?proto.geometry.GeometryBagData|undefined} value */
proto.geometry.OperatorRequest.prototype.setLeftGeometryBag = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.geometry.OperatorRequest.oneofGroups_[0], value);
};


proto.geometry.OperatorRequest.prototype.clearLeftGeometryBag = function() {
  this.setLeftGeometryBag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geometry.OperatorRequest.prototype.hasLeftGeometryBag = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional OperatorRequest left_nested_request = 4;
 * @return {?proto.geometry.OperatorRequest}
 */
proto.geometry.OperatorRequest.prototype.getLeftNestedRequest = function() {
  return /** @type{?proto.geometry.OperatorRequest} */ (
    jspb.Message.getWrapperField(this, proto.geometry.OperatorRequest, 4));
};


/** @param {?proto.geometry.OperatorRequest|undefined} value */
proto.geometry.OperatorRequest.prototype.setLeftNestedRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.geometry.OperatorRequest.oneofGroups_[0], value);
};


proto.geometry.OperatorRequest.prototype.clearLeftNestedRequest = function() {
  this.setLeftNestedRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geometry.OperatorRequest.prototype.hasLeftNestedRequest = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional GeometryBagData right_geometry_bag = 5;
 * @return {?proto.geometry.GeometryBagData}
 */
proto.geometry.OperatorRequest.prototype.getRightGeometryBag = function() {
  return /** @type{?proto.geometry.GeometryBagData} */ (
    jspb.Message.getWrapperField(this, proto.geometry.GeometryBagData, 5));
};


/** @param {?proto.geometry.GeometryBagData|undefined} value */
proto.geometry.OperatorRequest.prototype.setRightGeometryBag = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.geometry.OperatorRequest.oneofGroups_[1], value);
};


proto.geometry.OperatorRequest.prototype.clearRightGeometryBag = function() {
  this.setRightGeometryBag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geometry.OperatorRequest.prototype.hasRightGeometryBag = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional OperatorRequest right_nested_request = 6;
 * @return {?proto.geometry.OperatorRequest}
 */
proto.geometry.OperatorRequest.prototype.getRightNestedRequest = function() {
  return /** @type{?proto.geometry.OperatorRequest} */ (
    jspb.Message.getWrapperField(this, proto.geometry.OperatorRequest, 6));
};


/** @param {?proto.geometry.OperatorRequest|undefined} value */
proto.geometry.OperatorRequest.prototype.setRightNestedRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.geometry.OperatorRequest.oneofGroups_[1], value);
};


proto.geometry.OperatorRequest.prototype.clearRightNestedRequest = function() {
  this.setRightNestedRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geometry.OperatorRequest.prototype.hasRightNestedRequest = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ServiceOperatorType operator_type = 7;
 * @return {!proto.geometry.ServiceOperatorType}
 */
proto.geometry.OperatorRequest.prototype.getOperatorType = function() {
  return /** @type {!proto.geometry.ServiceOperatorType} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.geometry.ServiceOperatorType} value */
proto.geometry.OperatorRequest.prototype.setOperatorType = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional GeometryEncodingType results_encoding_type = 8;
 * @return {!proto.geometry.GeometryEncodingType}
 */
proto.geometry.OperatorRequest.prototype.getResultsEncodingType = function() {
  return /** @type {!proto.geometry.GeometryEncodingType} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.geometry.GeometryEncodingType} value */
proto.geometry.OperatorRequest.prototype.setResultsEncodingType = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional SpatialReferenceData operation_spatial_reference = 9;
 * @return {?proto.geometry.SpatialReferenceData}
 */
proto.geometry.OperatorRequest.prototype.getOperationSpatialReference = function() {
  return /** @type{?proto.geometry.SpatialReferenceData} */ (
    jspb.Message.getWrapperField(this, proto.geometry.SpatialReferenceData, 9));
};


/** @param {?proto.geometry.SpatialReferenceData|undefined} value */
proto.geometry.OperatorRequest.prototype.setOperationSpatialReference = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.geometry.OperatorRequest.prototype.clearOperationSpatialReference = function() {
  this.setOperationSpatialReference(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geometry.OperatorRequest.prototype.hasOperationSpatialReference = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional SpatialReferenceData result_spatial_reference = 10;
 * @return {?proto.geometry.SpatialReferenceData}
 */
proto.geometry.OperatorRequest.prototype.getResultSpatialReference = function() {
  return /** @type{?proto.geometry.SpatialReferenceData} */ (
    jspb.Message.getWrapperField(this, proto.geometry.SpatialReferenceData, 10));
};


/** @param {?proto.geometry.SpatialReferenceData|undefined} value */
proto.geometry.OperatorRequest.prototype.setResultSpatialReference = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.geometry.OperatorRequest.prototype.clearResultSpatialReference = function() {
  this.setResultSpatialReference(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geometry.OperatorRequest.prototype.hasResultSpatialReference = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional BufferParams buffer_params = 11;
 * @return {?proto.geometry.BufferParams}
 */
proto.geometry.OperatorRequest.prototype.getBufferParams = function() {
  return /** @type{?proto.geometry.BufferParams} */ (
    jspb.Message.getWrapperField(this, proto.geometry.BufferParams, 11));
};


/** @param {?proto.geometry.BufferParams|undefined} value */
proto.geometry.OperatorRequest.prototype.setBufferParams = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.geometry.OperatorRequest.oneofGroups_[2], value);
};


proto.geometry.OperatorRequest.prototype.clearBufferParams = function() {
  this.setBufferParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geometry.OperatorRequest.prototype.hasBufferParams = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional ConvexParams convex_params = 12;
 * @return {?proto.geometry.ConvexParams}
 */
proto.geometry.OperatorRequest.prototype.getConvexParams = function() {
  return /** @type{?proto.geometry.ConvexParams} */ (
    jspb.Message.getWrapperField(this, proto.geometry.ConvexParams, 12));
};


/** @param {?proto.geometry.ConvexParams|undefined} value */
proto.geometry.OperatorRequest.prototype.setConvexParams = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.geometry.OperatorRequest.oneofGroups_[2], value);
};


proto.geometry.OperatorRequest.prototype.clearConvexParams = function() {
  this.setConvexParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geometry.OperatorRequest.prototype.hasConvexParams = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional RelateParams relate_params = 13;
 * @return {?proto.geometry.RelateParams}
 */
proto.geometry.OperatorRequest.prototype.getRelateParams = function() {
  return /** @type{?proto.geometry.RelateParams} */ (
    jspb.Message.getWrapperField(this, proto.geometry.RelateParams, 13));
};


/** @param {?proto.geometry.RelateParams|undefined} value */
proto.geometry.OperatorRequest.prototype.setRelateParams = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.geometry.OperatorRequest.oneofGroups_[2], value);
};


proto.geometry.OperatorRequest.prototype.clearRelateParams = function() {
  this.setRelateParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geometry.OperatorRequest.prototype.hasRelateParams = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional RandomPointsParams random_points_params = 14;
 * @return {?proto.geometry.RandomPointsParams}
 */
proto.geometry.OperatorRequest.prototype.getRandomPointsParams = function() {
  return /** @type{?proto.geometry.RandomPointsParams} */ (
    jspb.Message.getWrapperField(this, proto.geometry.RandomPointsParams, 14));
};


/** @param {?proto.geometry.RandomPointsParams|undefined} value */
proto.geometry.OperatorRequest.prototype.setRandomPointsParams = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.geometry.OperatorRequest.oneofGroups_[2], value);
};


proto.geometry.OperatorRequest.prototype.clearRandomPointsParams = function() {
  this.setRandomPointsParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geometry.OperatorRequest.prototype.hasRandomPointsParams = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional GeneralizeParams generalize_params = 15;
 * @return {?proto.geometry.GeneralizeParams}
 */
proto.geometry.OperatorRequest.prototype.getGeneralizeParams = function() {
  return /** @type{?proto.geometry.GeneralizeParams} */ (
    jspb.Message.getWrapperField(this, proto.geometry.GeneralizeParams, 15));
};


/** @param {?proto.geometry.GeneralizeParams|undefined} value */
proto.geometry.OperatorRequest.prototype.setGeneralizeParams = function(value) {
  jspb.Message.setOneofWrapperField(this, 15, proto.geometry.OperatorRequest.oneofGroups_[2], value);
};


proto.geometry.OperatorRequest.prototype.clearGeneralizeParams = function() {
  this.setGeneralizeParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geometry.OperatorRequest.prototype.hasGeneralizeParams = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional IntersectionParams intersection_params = 16;
 * @return {?proto.geometry.IntersectionParams}
 */
proto.geometry.OperatorRequest.prototype.getIntersectionParams = function() {
  return /** @type{?proto.geometry.IntersectionParams} */ (
    jspb.Message.getWrapperField(this, proto.geometry.IntersectionParams, 16));
};


/** @param {?proto.geometry.IntersectionParams|undefined} value */
proto.geometry.OperatorRequest.prototype.setIntersectionParams = function(value) {
  jspb.Message.setOneofWrapperField(this, 16, proto.geometry.OperatorRequest.oneofGroups_[2], value);
};


proto.geometry.OperatorRequest.prototype.clearIntersectionParams = function() {
  this.setIntersectionParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geometry.OperatorRequest.prototype.hasIntersectionParams = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional OffsetParams offset_params = 17;
 * @return {?proto.geometry.OffsetParams}
 */
proto.geometry.OperatorRequest.prototype.getOffsetParams = function() {
  return /** @type{?proto.geometry.OffsetParams} */ (
    jspb.Message.getWrapperField(this, proto.geometry.OffsetParams, 17));
};


/** @param {?proto.geometry.OffsetParams|undefined} value */
proto.geometry.OperatorRequest.prototype.setOffsetParams = function(value) {
  jspb.Message.setOneofWrapperField(this, 17, proto.geometry.OperatorRequest.oneofGroups_[2], value);
};


proto.geometry.OperatorRequest.prototype.clearOffsetParams = function() {
  this.setOffsetParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geometry.OperatorRequest.prototype.hasOffsetParams = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional CutParams cut_params = 18;
 * @return {?proto.geometry.CutParams}
 */
proto.geometry.OperatorRequest.prototype.getCutParams = function() {
  return /** @type{?proto.geometry.CutParams} */ (
    jspb.Message.getWrapperField(this, proto.geometry.CutParams, 18));
};


/** @param {?proto.geometry.CutParams|undefined} value */
proto.geometry.OperatorRequest.prototype.setCutParams = function(value) {
  jspb.Message.setOneofWrapperField(this, 18, proto.geometry.OperatorRequest.oneofGroups_[2], value);
};


proto.geometry.OperatorRequest.prototype.clearCutParams = function() {
  this.setCutParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geometry.OperatorRequest.prototype.hasCutParams = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional ClipParams clip_params = 19;
 * @return {?proto.geometry.ClipParams}
 */
proto.geometry.OperatorRequest.prototype.getClipParams = function() {
  return /** @type{?proto.geometry.ClipParams} */ (
    jspb.Message.getWrapperField(this, proto.geometry.ClipParams, 19));
};


/** @param {?proto.geometry.ClipParams|undefined} value */
proto.geometry.OperatorRequest.prototype.setClipParams = function(value) {
  jspb.Message.setOneofWrapperField(this, 19, proto.geometry.OperatorRequest.oneofGroups_[2], value);
};


proto.geometry.OperatorRequest.prototype.clearClipParams = function() {
  this.setClipParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geometry.OperatorRequest.prototype.hasClipParams = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional DensifyParams densify_params = 20;
 * @return {?proto.geometry.DensifyParams}
 */
proto.geometry.OperatorRequest.prototype.getDensifyParams = function() {
  return /** @type{?proto.geometry.DensifyParams} */ (
    jspb.Message.getWrapperField(this, proto.geometry.DensifyParams, 20));
};


/** @param {?proto.geometry.DensifyParams|undefined} value */
proto.geometry.OperatorRequest.prototype.setDensifyParams = function(value) {
  jspb.Message.setOneofWrapperField(this, 20, proto.geometry.OperatorRequest.oneofGroups_[2], value);
};


proto.geometry.OperatorRequest.prototype.clearDensifyParams = function() {
  this.setDensifyParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geometry.OperatorRequest.prototype.hasDensifyParams = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional SimplifyParams simplify_params = 21;
 * @return {?proto.geometry.SimplifyParams}
 */
proto.geometry.OperatorRequest.prototype.getSimplifyParams = function() {
  return /** @type{?proto.geometry.SimplifyParams} */ (
    jspb.Message.getWrapperField(this, proto.geometry.SimplifyParams, 21));
};


/** @param {?proto.geometry.SimplifyParams|undefined} value */
proto.geometry.OperatorRequest.prototype.setSimplifyParams = function(value) {
  jspb.Message.setOneofWrapperField(this, 21, proto.geometry.OperatorRequest.oneofGroups_[2], value);
};


proto.geometry.OperatorRequest.prototype.clearSimplifyParams = function() {
  this.setSimplifyParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geometry.OperatorRequest.prototype.hasSimplifyParams = function() {
  return jspb.Message.getField(this, 21) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geometry.EnvelopeData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geometry.EnvelopeData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geometry.EnvelopeData.displayName = 'proto.geometry.EnvelopeData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geometry.EnvelopeData.prototype.toObject = function(opt_includeInstance) {
  return proto.geometry.EnvelopeData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geometry.EnvelopeData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.EnvelopeData.toObject = function(includeInstance, msg) {
  var f, obj = {
    xmin: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    ymin: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    xmax: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    ymax: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geometry.EnvelopeData}
 */
proto.geometry.EnvelopeData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geometry.EnvelopeData;
  return proto.geometry.EnvelopeData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geometry.EnvelopeData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geometry.EnvelopeData}
 */
proto.geometry.EnvelopeData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setXmin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setYmin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setXmax(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setYmax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geometry.EnvelopeData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geometry.EnvelopeData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geometry.EnvelopeData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geometry.EnvelopeData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXmin();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getYmin();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getXmax();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getYmax();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double xmin = 1;
 * @return {number}
 */
proto.geometry.EnvelopeData.prototype.getXmin = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.geometry.EnvelopeData.prototype.setXmin = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional double ymin = 2;
 * @return {number}
 */
proto.geometry.EnvelopeData.prototype.getYmin = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.geometry.EnvelopeData.prototype.setYmin = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional double xmax = 3;
 * @return {number}
 */
proto.geometry.EnvelopeData.prototype.getXmax = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.geometry.EnvelopeData.prototype.setXmax = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional double ymax = 4;
 * @return {number}
 */
proto.geometry.EnvelopeData.prototype.getYmax = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.geometry.EnvelopeData.prototype.setYmax = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.geometry.GeometryEncodingType = {
  UNKNOWN: 0,
  WKB: 1,
  WKT: 2,
  GEOJSON: 3,
  ESRISHAPE: 4
};

/**
 * @enum {number}
 */
proto.geometry.ServiceOperatorType = {
  PROJECT: 0,
  EXPORTTOJSON: 1,
  IMPORTFROMJSON: 2,
  IMPORTMAPGEOMETRYFROMJSON: 3,
  EXPORTTOESRISHAPE: 4,
  IMPORTFROMESRISHAPE: 5,
  UNION: 6,
  DIFFERENCE: 7,
  PROXIMITY2D: 8,
  RELATE: 9,
  EQUALS: 10,
  DISJOINT: 11,
  INTERSECTS: 12,
  WITHIN: 13,
  CONTAINS: 14,
  CROSSES: 15,
  TOUCHES: 16,
  OVERLAPS: 17,
  BUFFER: 18,
  DISTANCE: 19,
  INTERSECTION: 20,
  CLIP: 21,
  CUT: 22,
  DENSIFYBYLENGTH: 23,
  GEODESICBUFFER: 26,
  GEODETICDENSIFYBYLENGTH: 27,
  GEODETICLENGTH: 29,
  SIMPLIFY: 31,
  SIMPLIFYOGC: 32,
  OFFSET: 33,
  GENERALIZE: 34,
  GENERALIZEBYAREA: 35,
  EXPORTTOWKB: 36,
  IMPORTFROMWKB: 37,
  EXPORTTOWKT: 38,
  IMPORTFROMWKT: 39,
  IMPORTFROMGEOJSON: 40,
  EXPORTTOGEOJSON: 41,
  SYMMETRICDIFFERENCE: 42,
  CONVEXHULL: 43,
  BOUNDARY: 44,
  RANDOMPOINTS: 45,
  ENCLOSINGCIRCLE: 46
};

/**
 * @enum {number}
 */
proto.geometry.OffsetJoinType = {
  ROUND: 0,
  BEVEL: 1,
  MITER: 2,
  SQUARE: 3
};

goog.object.extend(exports, proto.geometry);
